let handleUrl=(()=>{var _ref=_asyncToGenerator(function*(url){const json=yield(yield fetch(url).catch(function(error){return Promise.reject(new Error("Error fetching data"))})).json().catch(function(){return log("Error parsing server response"),Promise.reject(new Error("Error parsing server response"))});return"OK"===json.status?(log(json),json):(log(`Server returned status code ${json.status}`,!0),Promise.reject(new Error(`Server returned status code ${json.status}`)))});return function(_x){return _ref.apply(this,arguments)}})();function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){return function step(key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}if(!info.done)return Promise.resolve(value).then(function(value){step("next",value)},function(err){step("throw",err)});resolve(value)}("next")})}}let DEBUG=!1,API_KEY=null;const GOOGLE_API="https://maps.google.com/maps/api/geocode/json";function log(message,warn=!1){DEBUG&&(warn?console.warn(message):console.log(message))}export default{setApiKey(apiKey){API_KEY=apiKey},enableDebug(flag=!0){DEBUG=flag},fromLatLng:(lat,lng,apiKey)=>_asyncToGenerator(function*(){if(!lat||!lng)return log("Provided coordinates are invalid",!0),Promise.reject(new Error("Provided coordinates are invalid"));const latLng=`${lat},${lng}`;let url=`${GOOGLE_API}?latlng=${encodeURI(latLng)}`;return(apiKey||API_KEY)&&(url+=`&key=${API_KEY=apiKey||API_KEY}`),handleUrl(url)})(),fromAddress:(address,apiKey)=>_asyncToGenerator(function*(){if(!address)return log("Provided address is invalid",!0),Promise.reject(new Error("Provided address is invalid"));let url=`${GOOGLE_API}?address=${encodeURI(address)}`;return(apiKey||API_KEY)&&(url+=`&key=${API_KEY=apiKey||API_KEY}`),handleUrl(url)})()};
